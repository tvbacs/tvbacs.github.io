{"version":3,"sources":["server.js"],"names":["express","require","path","mysql","bodyParser","session","multer","storage","memoryStorage","db","createConnection","host","user","password","database","app","process","isAuthenticated","req","res","next","post","redirect","status","use","urlencoded","extended","join","__dirname","resave","saveUninitialized","connect","secret","err","console","log","_req$body","body","username","sendFile","query","result","error","send","length","email","reward","bio","avatar","get","avatarBase64","Buffer","from","toString","json","success","_objectSpread","_req$body2","fullname","_req$body3","name","member","opinion","destroy","message","data","render","upload","single","description","photo","file","buffer","results","posts","map","id","_req$body4","place","country","love","avatarData","listen","port","concat"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst path = require('path');\r\nconst mysql = require('mysql2')\r\nconst bodyParser = require('body-parser');\r\nconst session = require('express-session');\r\nconst multer = require('multer');\r\n\r\n/*\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'cob_database',\r\n  password: 'cob_database@2024',\r\n  database: 'cob_database'\r\n});\r\n*/\r\n\r\n// Configure Multer for file uploads\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({ storage: storage });\r\n\r\n\r\nconst db = mysql.createConnection({\r\n\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '',\r\n  database: 'cob_database'\r\n});\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 1613;\r\n\r\n// Middleware setup\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json()); \r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use(session({\r\n  secret: 'your-secret-key', // Change this to a long random string\r\n  resave: false,\r\n  saveUninitialized: true\r\n}));\r\n\r\n\r\napp.use('/assets', express.static(path.join(__dirname, 'assets')));\r\napp.use('/index.html', express.static(path.join(__dirname, 'index.html')));\r\n\r\n\r\ndb.connect((err) => {\r\n  if (err) throw err;\r\n  console.log('Connected to the database');\r\n});\r\n\r\n// Serve the main page\r\napp.get('/', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'index.html'));\r\n});\r\n\r\n// Login endpoint\r\napp.post('/api/login', (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  console.log('Received POST /api/login with data:', { username, password });\r\n\r\n  db.query('SELECT * FROM user WHERE username = ? AND password = ?', [username, password], (err, result) => {\r\n    if (err) {\r\n      console.error('Database query error:', err);\r\n      res.status(500).send('Internal Server Error');\r\n      return;\r\n    }\r\n\r\n    console.log('Database query result:', result);\r\n\r\n    if (result.length > 0) {\r\n      const user = result[0];\r\n      req.session.user = {\r\n        fullname: user.fullname,\r\n        email: user.email,\r\n        username: user.username,\r\n        reward: user.reward,\r\n        bio: user.bio,\r\n        avatar: user.avatar\r\n      };\r\n      res.redirect('/index.html');\r\n      \r\n    } else {\r\n      res.redirect('/assets/html/login.html?loginFailed=true');\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\napp.get('/api/checkAuth', (req, res) => {\r\n  if (req.session.user) {\r\n    const user = req.session.user;\r\n    const avatarBase64 = user.avatar ? Buffer.from(user.avatar, 'binary').toString('base64') : null;\r\n    res.json({ success: true, user: { ...user, avatar: avatarBase64 } });\r\n  } else {\r\n    res.json({ success: false });\r\n  }\r\n});\r\n\r\n\r\n// Serve index.html only if the user is authenticated\r\napp.get('/index.html', isAuthenticated, (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'index.html'));\r\n});\r\n\r\n// Signup endpoint\r\napp.post('/api/signup', (req, res) => {\r\n  const { fullname, email, username, password } = req.body;\r\n\r\n  db.query('INSERT INTO user (fullname, email, username, password) VALUES (?, ?, ?, ?)', [fullname, email, username, password], (err, result) => {\r\n    if (err) {\r\n      console.error('Error inserting data into the database:', err);\r\n      res.redirect('/assets/html/signup.html?signupFailed=true');\r\n      return;\r\n    }\r\n    res.redirect('/assets/html/login.html');\r\n  });\r\n});\r\n\r\n// Contact form endpoint\r\napp.post('/api/contact', (req, res) => {\r\n  const { name, email, member, opinion } = req.body;\r\n\r\n  // Validate form data\r\n  if (!name || !email || !opinion) {\r\n    res.status(400).send('Name, Email, and Opinion are required fields.');\r\n    return;\r\n  }\r\n\r\n  // Insert form data into the database\r\n  const query = 'INSERT INTO contact (name, email, member, opinion) VALUES (?, ?, ?, ?)';\r\n  db.query(query, [name, email, member, opinion], (err, result) => {\r\n    if (err) {\r\n      console.error('Error inserting data into the database:', err);\r\n      res.redirect('/assets/html/contact.html?sendcontactFailed=true');\r\n      return;\r\n    }\r\n    res.redirect('/assets/html/contact.html?sendcontactFailed=0987');\r\n    \r\n  });\r\n});\r\n\r\napp.post('/api/logout', (req, res) => {\r\n  req.session.destroy((err) => {\r\n    if (err) {\r\n      return res.status(500).json({ success: false, message: 'Failed to log out' });\r\n    }\r\n    res.json({ success: true });\r\n  });\r\n});\r\n\r\n\r\n//profile \r\napp.set('view engine', 'ejs');\r\n\r\nfunction isAuthenticated(req, res, next) {\r\n  if (req.session.user) {\r\n    next();\r\n  } else {\r\n    res.redirect('/assets/html/login.html');\r\n  }\r\n}\r\n\r\n\r\napp.get('/profile', isAuthenticated, (req, res) => {\r\n  const user = req.session.user;\r\n  if (!user) {\r\n    res.redirect('\\assets\\html\\login.html');\r\n    return;\r\n  }\r\n\r\n  \r\n  // Convert avatar buffer to base64 string if it exists\r\n  const avatarBase64 = user.avatar ? Buffer.from(user.avatar.data).toString('base64') : null;\r\n\r\n  const data = {\r\n    fullname: user.fullname,\r\n    username: user.username,\r\n    email: user.email,\r\n    reward: '100',\r\n    bio: user.bio,\r\n    avatar: avatarBase64// Provide default avatar if none exists\r\n  };\r\n  res.render('profile', data);\r\n});\r\n\r\n\r\napp.get('/contact', (req, res) => {\r\n  res.render('contact');\r\n});\r\napp.get('/booking', (req, res) => {\r\n  res.render('booking');\r\n});\r\n\r\n\r\n// Route to create a new post\r\napp.post('/api/postDiary', upload.single('photo'), (req, res) => {\r\n  const { description } = req.body;\r\n  const photo = req.file.buffer;\r\n  const user = req.session.user;\r\n  \r\n  // Insert post data into database\r\n  const query = 'INSERT INTO post_diary (username, description, photo) VALUES (?, ?, ?)';\r\n  db.query(query, [user.username, description, photo], (err, result) => {\r\n    if (err) {\r\n      console.error('Error inserting data into the database:', err);\r\n      res.status(500).json({ success: false, error: 'Failed to insert data into database' });\r\n      return;\r\n    }\r\n    res.json({ success: true });\r\n  });\r\n});\r\n\r\n// Endpoint to fetch diary posts\r\napp.get('/api/posts', (req, res) => {\r\n  const username = req.session.user.username; // Lấy tên người dùng từ phiên làm việc\r\n\r\n  if (!username) {\r\n    res.status(400).json({ success: false, error: 'Username is required' });\r\n    return;\r\n  }\r\n\r\n  db.query('SELECT * FROM post_diary WHERE username = ?', [username], (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching posts:', err);\r\n      res.status(500).json({ success: false, error: 'Failed to fetch posts from database' });\r\n      return;\r\n    }\r\n\r\n    // Map the results to send back to client\r\n    const posts = results.map(post => ({\r\n      id: post.id,\r\n      username: post.username,\r\n      description: post.description,\r\n      photo: post.photo.toString('base64') // Convert Buffer to base64 string for image\r\n    }));\r\n    res.json({ success: true, posts });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\napp.post('/api/postInspiration', upload.single('photo'), (req, res) => {\r\n  const { description, place, country } = req.body;\r\n  const photo = req.file.buffer; // Assuming multer middleware is used to handle file upload\r\n\r\n\r\n  // Insert inspiration data into database\r\n  const query = 'INSERT INTO post_inspiration (username, description, place, country, photo) VALUES (?, ?, ?, ?, ?)';\r\n  const user = req.session.user; // Assuming user is authenticated and stored in session\r\n\r\n  db.query(query, [user.username, description, place, country, photo], (err, result) => {\r\n    if (err) {\r\n      console.error('Error inserting data into the database:', err);\r\n      res.status(500).json({ success: false, error: 'Failed to insert data into database' });\r\n      return;\r\n    }\r\n    console.log('Inspiration posted successfully');\r\n    res.json({ success: true });\r\n  });\r\n});\r\n\r\n\r\n// Endpoint to fetch inspiration posts\r\napp.get('/api/postsInspiration_load', (req, res) => {\r\n  const user = req.session.user;\r\n\r\n  // Check if user is authenticated\r\n  if (!user) {\r\n    return res.status(401).json({ success: false, error: 'Unauthorized' });\r\n  }\r\n\r\n  // Query to fetch posts for the authenticated user\r\n  const query = 'SELECT * FROM post_inspiration WHERE username = ?';\r\n  db.query(query, [user.username], (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching posts:', err);\r\n      return res.status(500).json({ success: false, error: 'Failed to fetch posts' });\r\n    }\r\n\r\n    // Map the results to include base64 encoded photo field\r\n    const posts = results.map(post => ({\r\n      username: post.username,\r\n      description: post.description,\r\n      photo: post.photo.toString('base64'), // Convert Buffer to base64 string\r\n      love: post.love,\r\n      place: post.place,\r\n      country: post.country\r\n    }));\r\n    // Send the response with the mapped posts\r\n    res.json({ success: true, posts });\r\n  });\r\n});\r\n\r\n// POST route to handle profile picture upload\r\napp.post('/uploadAvatar', isAuthenticated, upload.single('avatar'), (req, res) => {\r\n  const user = req.session.user;\r\n\r\n  if (!user) {\r\n      return res.status(401).json({ message: 'Unauthorized' });\r\n  }\r\n\r\n  if (!req.file) {\r\n      return res.status(400).json({ message: 'Please select an image file.' });\r\n  }\r\n\r\n  // Get the file data from req.file.buffer\r\n  const avatarData = req.file.buffer;\r\n\r\n  db.query('UPDATE user SET avatar = ? WHERE username = ?', [avatarData, user.username], (err, result) => {\r\n      if (err) {\r\n          console.error('Error updating avatar in the database:', err);\r\n          return res.status(500).json({ success: false, message: 'Failed to update avatar.' });\r\n      }\r\n\r\n      res.json({ success: true, message: 'Avatar updated successfully.' });\r\n  });\r\n});\r\n\r\n\r\napp.post('/uploadAvatar', isAuthenticated, upload.single('avatar'), (req, res) => {\r\n  const user = req.session.user;\r\n\r\n  if (!user) {\r\n    return res.status(401).json({ message: 'Unauthorized' });\r\n  }\r\n\r\n  if (!req.file) {\r\n    return res.status(400).json({ message: 'Please select an image file.' });\r\n  }\r\n\r\n  // Get the file data from req.file.buffer\r\n  const avatarData = req.file.buffer;\r\n  \r\n  db.query('UPDATE user SET avatar = ? WHERE username = ?', [avatarData, user.username], (err, result) => {\r\n    if (err) {\r\n      console.error('Error updating avatar in the database:', err);\r\n      return res.status(500).json({ success: false, message: 'Failed to update avatar.' });\r\n    }\r\n\r\n    const avatarBase64 = avatarData.toString('base64');\r\n    res.json({ success: true, avatarBase64 });\r\n  });\r\n});\r\n\r\n// GET route to retrieve avatar\r\napp.get('/getAvatar', isAuthenticated, (req, res) => {\r\n  const user = req.session.user;\r\n\r\n  if (!user) {\r\n    return res.status(401).json({ message: 'Unauthorized' });\r\n  }\r\n\r\n  db.query('SELECT avatar FROM user WHERE username = ?', [user.username], (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching avatar from the database:', err);\r\n      return res.status(500).json({ success: false, message: 'Failed to fetch avatar.' });\r\n    }\r\n\r\n    if (results.length > 0) {\r\n      const avatarData = results[0].avatar;\r\n      const avatarBase64 = avatarData.toString('base64');\r\n      res.json({ success: true, avatar: avatarBase64 });\r\n    } else {\r\n      res.status(404).json({ success: false, message: 'Avatar not found.' });\r\n    }\r\n  });\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});"]}