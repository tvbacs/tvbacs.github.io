{"version":3,"sources":["server.js"],"names":["express","require","path","mysql","bodyParser","session","multer","storage","memoryStorage","upload","db","createConnection","host","user","password","database","app","port","process","env","PORT","use","urlencoded","extended","json","join","__dirname","secret","resave","saveUninitialized","connect","err","console","log","get","req","res","sendFile","post","body","username","query","result","error","status","send","length","fullname","email","reward","bio","avatar","redirect","avatarBase64","Buffer","from","toString","success","isAuthenticated","name","member","opinion","destroy","message","set","next","data","render","single","description","photo","file","buffer","results","posts","map","id","place","country","love","avatarData","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst path = require('path');\r\nconst mysql = require('mysql2')\r\nconst bodyParser = require('body-parser');\r\nconst session = require('express-session');\r\nconst multer = require('multer');\r\n\r\n/*\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'cob_database',\r\n  password: 'cob_database@2024',\r\n  database: 'cob_database'\r\n});\r\n*/\r\n\r\n// Configure Multer for file uploads\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({ storage: storage });\r\n\r\n\r\nconst db = mysql.createConnection({\r\n\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '',\r\n  database: 'cob_database'\r\n});\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 1613;\r\n\r\n// Middleware setup\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json()); \r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use(session({\r\n  secret: 'your-secret-key', // Change this to a long random string\r\n  resave: false,\r\n  saveUninitialized: true\r\n}));\r\n\r\n\r\napp.use('/assets', express.static(path.join(__dirname, 'assets')));\r\napp.use('/index.html', express.static(path.join(__dirname, 'index.html')));\r\n\r\n\r\ndb.connect((err) => {\r\n  if (err) throw err;\r\n  console.log('Connected to the database');\r\n});\r\n\r\n// Serve the main page\r\napp.get('/', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'index.html'));\r\n});\r\n\r\n// Login endpoint\r\napp.post('/api/login', (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  console.log('Received POST /api/login with data:', { username, password });\r\n\r\n  db.query('SELECT * FROM user WHERE username = ? AND password = ?', [username, password], (err, result) => {\r\n    if (err) {\r\n      console.error('Database query error:', err);\r\n      res.status(500).send('Internal Server Error');\r\n      return;\r\n    }\r\n\r\n    console.log('Database query result:', result);\r\n\r\n    if (result.length > 0) {\r\n      const user = result[0];\r\n      req.session.user = {\r\n        fullname: user.fullname,\r\n        email: user.email,\r\n        username: user.username,\r\n        reward: user.reward,\r\n        bio: user.bio,\r\n        avatar: user.avatar\r\n      };\r\n      res.redirect('/index.html');\r\n      \r\n    } else {\r\n      res.redirect('/assets/html/login.html?loginFailed=true');\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\napp.get('/api/checkAuth', (req, res) => {\r\n  if (req.session.user) {\r\n    const user = req.session.user;\r\n    const avatarBase64 = user.avatar ? Buffer.from(user.avatar, 'binary').toString('base64') : null;\r\n    res.json({ success: true, user: { ...user, avatar: avatarBase64 } });\r\n  } else {\r\n    res.json({ success: false });\r\n  }\r\n});\r\n\r\n\r\n// Serve index.html only if the user is authenticated\r\napp.get('/index.html', isAuthenticated, (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'index.html'));\r\n});\r\n\r\n// Signup endpoint\r\napp.post('/api/signup', (req, res) => {\r\n  const { fullname, email, username, password } = req.body;\r\n\r\n  db.query('INSERT INTO user (fullname, email, username, password) VALUES (?, ?, ?, ?)', [fullname, email, username, password], (err, result) => {\r\n    if (err) {\r\n      console.error('Error inserting data into the database:', err);\r\n      res.redirect('/assets/html/signup.html?signupFailed=true');\r\n      return;\r\n    }\r\n    res.redirect('/assets/html/login.html');\r\n  });\r\n});\r\n\r\n// Contact form endpoint\r\napp.post('/api/contact', (req, res) => {\r\n  const { name, email, member, opinion } = req.body;\r\n\r\n  // Validate form data\r\n  if (!name || !email || !opinion) {\r\n    res.status(400).send('Name, Email, and Opinion are required fields.');\r\n    return;\r\n  }\r\n\r\n  // Insert form data into the database\r\n  const query = 'INSERT INTO contact (name, email, member, opinion) VALUES (?, ?, ?, ?)';\r\n  db.query(query, [name, email, member, opinion], (err, result) => {\r\n    if (err) {\r\n      console.error('Error inserting data into the database:', err);\r\n      res.redirect('/assets/html/contact.html?sendcontactFailed=true');\r\n      return;\r\n    }\r\n    res.redirect('/assets/html/contact.html?sendcontactFailed=0987');\r\n    \r\n  });\r\n});\r\n\r\napp.post('/api/logout', (req, res) => {\r\n  req.session.destroy((err) => {\r\n    if (err) {\r\n      return res.status(500).json({ success: false, message: 'Failed to log out' });\r\n    }\r\n    res.json({ success: true });\r\n  });\r\n});\r\n\r\n\r\n//profile \r\napp.set('view engine', 'ejs');\r\n\r\nfunction isAuthenticated(req, res, next) {\r\n  if (req.session.user) {\r\n    next();\r\n  } else {\r\n    res.redirect('/assets/html/login.html');\r\n  }\r\n}\r\n\r\n\r\napp.get('/profile', isAuthenticated, (req, res) => {\r\n  const user = req.session.user;\r\n  if (!user) {\r\n    res.redirect('\\assets\\html\\login.html');\r\n    return;\r\n  }\r\n\r\n  \r\n  // Convert avatar buffer to base64 string if it exists\r\n  const avatarBase64 = user.avatar ? Buffer.from(user.avatar.data).toString('base64') : null;\r\n\r\n  const data = {\r\n    fullname: user.fullname,\r\n    username: user.username,\r\n    email: user.email,\r\n    reward: '100',\r\n    bio: user.bio,\r\n    avatar: avatarBase64// Provide default avatar if none exists\r\n  };\r\n  res.render('profile', data);\r\n});\r\n\r\n\r\napp.get('/contact', (req, res) => {\r\n  res.render('contact');\r\n});\r\napp.get('/booking', (req, res) => {\r\n  res.render('booking');\r\n});\r\n\r\n\r\n// Route to create a new post\r\napp.post('/api/postDiary', upload.single('photo'), (req, res) => {\r\n  const { description } = req.body;\r\n  const photo = req.file.buffer;\r\n  const user = req.session.user;\r\n  \r\n  // Insert post data into database\r\n  const query = 'INSERT INTO post_diary (username, description, photo) VALUES (?, ?, ?)';\r\n  db.query(query, [user.username, description, photo], (err, result) => {\r\n    if (err) {\r\n      console.error('Error inserting data into the database:', err);\r\n      res.status(500).json({ success: false, error: 'Failed to insert data into database' });\r\n      return;\r\n    }\r\n    res.json({ success: true });\r\n  });\r\n});\r\n\r\n// Endpoint to fetch diary posts\r\napp.get('/api/posts', (req, res) => {\r\n  const username = req.session.user.username; // Lấy tên người dùng từ phiên làm việc\r\n\r\n  if (!username) {\r\n    res.status(400).json({ success: false, error: 'Username is required' });\r\n    return;\r\n  }\r\n\r\n  db.query('SELECT * FROM post_diary WHERE username = ?', [username], (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching posts:', err);\r\n      res.status(500).json({ success: false, error: 'Failed to fetch posts from database' });\r\n      return;\r\n    }\r\n\r\n    // Map the results to send back to client\r\n    const posts = results.map(post => ({\r\n      id: post.id,\r\n      username: post.username,\r\n      description: post.description,\r\n      photo: post.photo.toString('base64') // Convert Buffer to base64 string for image\r\n    }));\r\n    res.json({ success: true, posts });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\napp.post('/api/postInspiration', upload.single('photo'), (req, res) => {\r\n  const { description, place, country } = req.body;\r\n  const photo = req.file.buffer; // Assuming multer middleware is used to handle file upload\r\n\r\n\r\n  // Insert inspiration data into database\r\n  const query = 'INSERT INTO post_inspiration (username, description, place, country, photo) VALUES (?, ?, ?, ?, ?)';\r\n  const user = req.session.user; // Assuming user is authenticated and stored in session\r\n\r\n  db.query(query, [user.username, description, place, country, photo], (err, result) => {\r\n    if (err) {\r\n      console.error('Error inserting data into the database:', err);\r\n      res.status(500).json({ success: false, error: 'Failed to insert data into database' });\r\n      return;\r\n    }\r\n    console.log('Inspiration posted successfully');\r\n    res.json({ success: true });\r\n  });\r\n});\r\n\r\n\r\n// Endpoint to fetch inspiration posts\r\napp.get('/api/postsInspiration_load', (req, res) => {\r\n  const user = req.session.user;\r\n\r\n  // Check if user is authenticated\r\n  if (!user) {\r\n    return res.status(401).json({ success: false, error: 'Unauthorized' });\r\n  }\r\n\r\n  // Query to fetch posts for the authenticated user\r\n  const query = 'SELECT * FROM post_inspiration WHERE username = ?';\r\n  db.query(query, [user.username], (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching posts:', err);\r\n      return res.status(500).json({ success: false, error: 'Failed to fetch posts' });\r\n    }\r\n\r\n    // Map the results to include base64 encoded photo field\r\n    const posts = results.map(post => ({\r\n      username: post.username,\r\n      description: post.description,\r\n      photo: post.photo.toString('base64'), // Convert Buffer to base64 string\r\n      love: post.love,\r\n      place: post.place,\r\n      country: post.country\r\n    }));\r\n    // Send the response with the mapped posts\r\n    res.json({ success: true, posts });\r\n  });\r\n});\r\n\r\n// POST route to handle profile picture upload\r\napp.post('/uploadAvatar', isAuthenticated, upload.single('avatar'), (req, res) => {\r\n  const user = req.session.user;\r\n\r\n  if (!user) {\r\n      return res.status(401).json({ message: 'Unauthorized' });\r\n  }\r\n\r\n  if (!req.file) {\r\n      return res.status(400).json({ message: 'Please select an image file.' });\r\n  }\r\n\r\n  // Get the file data from req.file.buffer\r\n  const avatarData = req.file.buffer;\r\n\r\n  db.query('UPDATE user SET avatar = ? WHERE username = ?', [avatarData, user.username], (err, result) => {\r\n      if (err) {\r\n          console.error('Error updating avatar in the database:', err);\r\n          return res.status(500).json({ success: false, message: 'Failed to update avatar.' });\r\n      }\r\n\r\n      res.json({ success: true, message: 'Avatar updated successfully.' });\r\n  });\r\n});\r\n\r\n\r\napp.post('/uploadAvatar', isAuthenticated, upload.single('avatar'), (req, res) => {\r\n  const user = req.session.user;\r\n\r\n  if (!user) {\r\n    return res.status(401).json({ message: 'Unauthorized' });\r\n  }\r\n\r\n  if (!req.file) {\r\n    return res.status(400).json({ message: 'Please select an image file.' });\r\n  }\r\n\r\n  // Get the file data from req.file.buffer\r\n  const avatarData = req.file.buffer;\r\n  \r\n  db.query('UPDATE user SET avatar = ? WHERE username = ?', [avatarData, user.username], (err, result) => {\r\n    if (err) {\r\n      console.error('Error updating avatar in the database:', err);\r\n      return res.status(500).json({ success: false, message: 'Failed to update avatar.' });\r\n    }\r\n\r\n    const avatarBase64 = avatarData.toString('base64');\r\n    res.json({ success: true, avatarBase64 });\r\n  });\r\n});\r\n\r\n// GET route to retrieve avatar\r\napp.get('/getAvatar', isAuthenticated, (req, res) => {\r\n  const user = req.session.user;\r\n\r\n  if (!user) {\r\n    return res.status(401).json({ message: 'Unauthorized' });\r\n  }\r\n\r\n  db.query('SELECT avatar FROM user WHERE username = ?', [user.username], (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching avatar from the database:', err);\r\n      return res.status(500).json({ success: false, message: 'Failed to fetch avatar.' });\r\n    }\r\n\r\n    if (results.length > 0) {\r\n      const avatarData = results[0].avatar;\r\n      const avatarBase64 = avatarData.toString('base64');\r\n      res.json({ success: true, avatar: avatarBase64 });\r\n    } else {\r\n      res.status(404).json({ success: false, message: 'Avatar not found.' });\r\n    }\r\n  });\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});"],"file":"server.dev.js"}